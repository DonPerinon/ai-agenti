{
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('InputChat').item.json.chatInput }}",
        "options": {
          "systemMessage": "\"You are a helpful assistant.\nRespond based on user input and do not use tools when unnecessary.\nPrices for products and product detail get using SerpAPI tool, \""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1472,
        112
      ],
      "id": "8fd2c18d-5ac9-4a5b-8ffd-89dc2aa5171c",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1152,
        336
      ],
      "id": "c9746774-926a-4dd0-905e-724aa2ed46dc",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "2oSLWXj8MV7nGafu",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1280,
        336
      ],
      "id": "b007ee6c-cd39-4316-b420-d6f023c6dbac",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT EXISTS (\n    SELECT 1 \n    FROM information_schema.tables \n    WHERE table_schema = 'public' \n      AND table_name = 'orders'\n) AS table_exists;\n",
        "options": {
          "queryReplacement": "",
          "replaceEmptyStrings": true
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        480,
        112
      ],
      "id": "859f8d8b-2bb9-46fc-9d0e-d51d5c125334",
      "name": "Execute a SQL query1",
      "credentials": {
        "postgres": {
          "id": "Pl0stePkJmGF26ro",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.table_exists }}",
                    "rightValue": "false",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    },
                    "id": "9610becf-020f-4e9a-9149-e1cb5d543f23"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ada38b14-89e3-49ac-90f5-60a8b3a9da03",
                    "leftValue": "={{ $json.table_exists }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        704,
        112
      ],
      "id": "87ae7eda-be71-4676-b90f-66463793c18e",
      "name": "Switch"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        256,
        112
      ],
      "id": "6025ced3-f3a5-4eb9-abda-0d6fca122d31",
      "name": "InputChat",
      "webhookId": "b61c39a7-61c9-4afc-a57f-52a3ef4971e0"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get user_id based on name defined in input for orders\n users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list",
          "cachedResultName": "users"
        },
        "where": {
          "values": [
            {
              "column": "name",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values0_Value', `name is allways with upper first letter for name and surname`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1408,
        336
      ],
      "id": "dab4e2ed-a370-4b8b-ab8e-0e595354ad88",
      "name": "Get user detail",
      "credentials": {
        "postgres": {
          "id": "Pl0stePkJmGF26ro",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Return orders based on user input us",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "orders",
          "mode": "list",
          "cachedResultName": "orders"
        },
        "where": {
          "values": [
            {
              "column": "user_id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values0_Value', `use user id field from users db`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1536,
        336
      ],
      "id": "50412a16-9620-41d2-b56f-2242d20f781f",
      "name": "Orders list",
      "credentials": {
        "postgres": {
          "id": "Pl0stePkJmGF26ro",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- 1. Create tables (same as before)\nCREATE TABLE IF NOT EXISTS users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS orders (\n    id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(id),\n    product_name VARCHAR(100) NOT NULL,\n    quantity INT NOT NULL,\n    price NUMERIC(10,2) NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- 2. Insert realistic mock users (simpler method)\nINSERT INTO users (name, email)\nVALUES\n('Pepa Novak', 'pepa.novak@example.com'),\n('Jan Horvat', 'jan.horvat@example.com'),\n('Eva Kovac', 'eva.kovac@example.com'),\n('Luka Ilic', 'luka.ilic@example.com'),\n('Maja Petrovic', 'maja.petrovic@example.com'),\n('Tom Markovic', 'tom.markovic@example.com'),\n('Sara Jovanovic', 'sara.jovanovic@example.com'),\n('Nik Stojanovic', 'nik.stojanovic@example.com'),\n('Ana Nikolic', 'ana.nikolic@example.com'),\n('David Vukovic', 'david.vukovic@example.com');\n\n-- 3. Insert random orders\n-- We'll pick a random user_id using generate_series and random()\nINSERT INTO orders (user_id, product_name, quantity, price)\nSELECT\n  (1 + floor(random()*10)::int) AS user_id,  -- random user from 1-10\n  CASE floor(random()*7)::int\n      WHEN 0 THEN 'Laptop'\n      WHEN 1 THEN 'Mouse'\n      WHEN 2 THEN 'Keyboard'\n      WHEN 3 THEN 'Monitor'\n      WHEN 4 THEN 'Headphones'\n      WHEN 5 THEN 'Webcam'\n      ELSE 'USB Cable'\n  END AS product_name,\n  (1 + floor(random()*5)::int) AS quantity,\n  round((10 + random()*500)::numeric, 2) AS price\nFROM generate_series(1, 50);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        928,
        32
      ],
      "id": "9dcf6352-eade-4e75-8f43-d42cefc11bb6",
      "name": "DefaultDataMock",
      "credentials": {
        "postgres": {
          "id": "Pl0stePkJmGF26ro",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    output: $input.first().json.output,\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2128,
        112
      ],
      "id": "b1b1ddad-dfa8-435f-a753-2983dfa5f16b",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "content": "## Simple order assistant\nprovides responses about orders using mock data."
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "5452a2f4-76ab-4a39-bedf-3ea6f76f98de",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Return orders based on user input us",
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "orders",
          "mode": "list",
          "cachedResultName": "orders"
        },
        "deleteCommand": "delete",
        "where": {
          "values": [
            {
              "column": "product_name",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values0_Value', `Name of requested item to delete.`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1664,
        336
      ],
      "id": "e26a321c-58ea-4050-8517-a50aff639bb8",
      "name": "Delete order",
      "credentials": {
        "postgres": {
          "id": "Pl0stePkJmGF26ro",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        1792,
        336
      ],
      "id": "74e7fb3a-1288-4d10-ad86-61417d3f3add",
      "name": "SerpAPI",
      "credentials": {
        "serpApi": {
          "id": "K1ERSjWXW7jNc1zX",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Create or update order based on user input",
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "orders",
          "mode": "list",
          "cachedResultName": "orders"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('user_id', ``, 'number') }}",
            "product_name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('product_name', ``, 'string') }}",
            "price": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('price', ``, 'number') }}",
            "quantity": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('quantity', ``, 'number') }}",
            "id": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('id__using_to_match_', ``, 'number') }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            },
            {
              "id": "product_name",
              "displayName": "product_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "quantity",
              "displayName": "quantity",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            },
            {
              "id": "price",
              "displayName": "price",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            },
            {
              "id": "order_date",
              "displayName": "order_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1920,
        336
      ],
      "id": "73c1fc16-630b-4ca4-bc44-2be7caf5d29d",
      "name": "Create order",
      "credentials": {
        "postgres": {
          "id": "Pl0stePkJmGF26ro",
          "name": "Postgres account 2"
        }
      }
    }
  ],
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "DefaultDataMock",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InputChat": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get user detail": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Orders list": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "DefaultDataMock": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete order": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "SerpAPI": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create order": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "d4d69bfb25a6c0d232d077ff52788a850e9474ba40b33e5f6bc246cbf086a076"
  }
}